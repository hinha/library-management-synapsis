syntax = "proto3";

package user;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/descriptor.proto";


// Tags are applied at the field level
extend google.protobuf.FieldOptions {
  // Multiple Tags can be specified.
  string tags = 847939;
}

extend google.protobuf.OneofOptions {
  // Multiple Tags can be specified.
  string oneof_tags = 847939;
}

option go_package = "github.com/hinha/library-management-synapsis/gen/user";

enum UserRole {
  USER_ROLE_UNSPECIFIED = 0;
  USER_ROLE_ADMIN = 1;
  USER_ROLE_OPERATION = 2;
}

service UserService {
  rpc Register(RegisterRequest) returns (UserResponse) {
    option (google.api.http) = {
      post: "/api/users/register"
      body: "*"
    };
  }

  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/users/login"
      body: "*"
    };
  }

  rpc Update(UpdateUserRequest) returns (UserResponse) {
    option (google.api.http) = {
      patch: "/api/users/{id}"
      body: "*"
    };
  }

  rpc Get(GetUserRequest) returns (UserResponse) {
    option (google.api.http) = {
      get: "/api/users/{id}"
    };
  }

  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse) {}

  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {
    option (google.api.http) = {
      get: "/health"
    };
  }
}

// Custom option for injecting Go struct tag
extend google.protobuf.FieldOptions {
  string validate = 65001;
}
message RegisterRequest {
  string name = 1 [(tags) = "validate:\"required,min=1,max=64\""];
  string email = 2 [(tags) = "validate:\"required,email\""];
  string password = 3 [(tags) = "validate:\"required,min=8\""];
  UserRole role = 4 [(tags) = "validate:\"required,role\""];
}


message LoginRequest {
  string email = 1 [(validate) = "required,email"];
  string password = 2 [(validate) = "required,min=6"];
}

message UpdateUserRequest {
  string id = 1 [(validate) = "required,uuid4"];
  google.protobuf.FieldMask update_mask = 2;
  string name = 3 [(validate) = "omitempty,max=100"];
  string email = 4 [(validate) = "omitempty,email"];
}

message GetUserRequest {
  string id = 1;
}

message UserResponse {
  string id = 1;
  string name = 2;
  string email = 3;
  UserRole role = 4;
}

message LoginResponse {
  string token = 1;
  string expired_at = 2;
}

message ValidateTokenRequest {
  string token = 1;
}

message ValidateTokenResponse {
  string user_id = 1;
  UserRole role = 2;
  bool   is_valid = 3;
}

message HealthCheckRequest {}

message ComponentStatus {
  string name = 1;
  string status = 2; // "UP", "DOWN", "DEGRADED"
  string message = 3 [(tags) = "json:\"message,omitempty\""];; // optional: "db connection, redis timeout"
}

message HealthCheckResponse {
  repeated ComponentStatus components = 1;
  string status = 2; // "HEALTHY", "DEGRADED", "UNHEALTHY"
}
